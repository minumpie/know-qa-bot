import logging
import json
import random
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='logs/bot.log',
    encoding='utf-8'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
def load_questions():
    try:
        with open('questions.json', 'r', encoding='utf-8') as f:
            data = json.load(f)

        valid_data = [q for q in data if "question" in q and "answer" in q]

        if not valid_data:
            raise ValueError("No valid questions found in questions.json")

        logging.info(f"Loaded {len(valid_data)} questions from questions.json")
        return valid_data

    except FileNotFoundError:
        logging.error("questions.json not found")
        return []
    except json.JSONDecodeError:
        logging.error("Invalid JSON format in questions.json")
        return []
    except Exception as e:
        logging.error(f"Unexpected error while loading questions: {e}")
        return []

QUESTIONS = load_questions()
used_questions = set()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üêá –Ø KnowQA.\n"
        "–û—Ç–ø—Ä–∞–≤—å /question, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
    )
    logging.info(f"User {update.effective_chat.id} started the bot")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìú –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/question ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"
    )
    logging.info(f"User {update.effective_chat.id} requested /help")

# –ö–æ–º–∞–Ω–¥–∞ /question
async def question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global used_questions

    if not QUESTIONS:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –±–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞ –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.")
        logging.error("No questions available ‚Äî /question aborted")
        return

    # –°–±—Ä–æ—Å, –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã
    if len(used_questions) == len(QUESTIONS):
        used_questions.clear()
        logging.info("All questions have been shown, restarting the cycle")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –µ—â—ë –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è
    available_indices = [i for i in range(len(QUESTIONS)) if i not in used_questions]
    index = random.choice(available_indices)
    used_questions.add(index)

    q = QUESTIONS[index]['question']
    a = QUESTIONS[index]['answer']

    try:
        text = f"‚ùì *–í–æ–ø—Ä–æ—Å:*\n{q}\n\n‚úÖ *–û—Ç–≤–µ—Ç:*\n{a}"
        await update.message.reply_markdown(text)
        logging.info(f"Sent question #{index + 1}")
    except Exception as e:
        logging.error(f"Failed to send question: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("question", question))
    logging.info("Bot started")
    app.run_polling()

if __name__ == '__main__':
    main()
